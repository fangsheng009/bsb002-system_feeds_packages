--- a/Makefile.am
+++ b/Makefile.am
@@ -1,8 +1,4 @@
-if USE_LIBGTK
-TOOLS_DIR = tools
-else
 TOOLS_DIR =
-endif
 
 SUBDIRS = libgssdp $(TOOLS_DIR) tests doc
 
--- a/Makefile.in
+++ b/Makefile.in
@@ -97,7 +97,7 @@ AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGE
 	distdir dist dist-all distcheck
 ETAGS = etags
 CTAGS = ctags
-DIST_SUBDIRS = libgssdp tools tests doc
+DIST_SUBDIRS = libgssdp
 DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
 distdir = $(PACKAGE)-$(VERSION)
 top_distdir = $(distdir)
--- a/libgssdp/gssdp-client.c
+++ b/libgssdp/gssdp-client.c
@@ -641,6 +641,8 @@ parse_http_request (char
                     int                 *type)
 {
         char *req_method;
+	char *req_path;
+        SoupHTTPVersion req_http_version;
 
         *headers = soup_message_headers_new (SOUP_MESSAGE_HEADERS_REQUEST);
 
@@ -648,12 +650,18 @@ parse_http_request (char
                                         len,
                                         *headers,
                                         &req_method,
-                                        NULL,
-                                        NULL) == SOUP_STATUS_OK) {
+                                        &req_path,
+                                        &req_http_version) == SOUP_STATUS_OK) {
                 if (g_ascii_strncasecmp (req_method,
                                          SSDP_SEARCH_METHOD,
-                                         strlen (SSDP_SEARCH_METHOD)) == 0)
-                        *type = _GSSDP_DISCOVERY_REQUEST;
+                                         strlen (SSDP_SEARCH_METHOD)) == 0) {
+			if (g_ascii_strcasecmp (req_path, "*") != 0)
+                        	g_warning ("Unhandled path '%s'", req_path);
+                        else if (req_http_version != SOUP_HTTP_1_1)
+                        	g_warning ("Bad HTTP version!");
+                        else
+                        	*type = _GSSDP_DISCOVERY_REQUEST;
+				}
                 else if (g_ascii_strncasecmp (req_method,
                                               GENA_NOTIFY_METHOD,
                                               strlen (GENA_NOTIFY_METHOD)) == 0)
@@ -662,6 +670,7 @@ parse_http_request (char
                         g_warning ("Unhandled method '%s'", req_method);
 
                 g_free (req_method);
+		g_free (req_path);
 
                 return TRUE;
         } else {
--- a/libgssdp/gssdp-resource-group.c
+++ b/libgssdp/gssdp-resource-group.c
@@ -737,7 +737,7 @@ message_received_cb (GSSDPClient
                      gpointer            user_data)
 {
         GSSDPResourceGroup *resource_group;
-        const char *target, *mx_str;
+        const char *man, *target, *mx_str;
         gboolean want_all;
         int mx;
         GList *l;
@@ -752,6 +752,14 @@ message_received_cb (GSSDPClient
         if (type != _GSSDP_DISCOVERY_REQUEST)
                 return;
 
+	/* Extract MAN */
+        man = soup_message_headers_get (headers, "MAN");
+        if (!man) {
+                g_warning ("Discovery request did not have a MAN header");
+
+                return;
+        }
+
         /* Extract target */
         target = soup_message_headers_get (headers, "ST");
         if (!target) {
@@ -765,10 +773,28 @@ message_received_cb (GSSDPClient
 
         /* Extract MX */
         mx_str = soup_message_headers_get (headers, "MX");
-        if (mx_str)
-                mx = atoi (mx_str);
-        else
-                mx = SSDP_DEFAULT_MX;
+	if (!mx_str) {
+                g_warning ("Discovery request did not have an MX header");
+
+                return;
+        }
+        else if (strcmp (mx_str, "") == 0) {
+                g_warning ("Discovery request did have an empty MX header");
+
+                return;
+        }
+        else {
+                char *endptr = NULL;
+                mx = strtol (mx_str, &endptr, 10);
+                if (endptr && *endptr) {
+                        g_warning ("Discovery request did not have a valid integer MX header");
+                        return;
+                }
+                if (mx < 0) {
+                        g_warning ("Discovery request did have a negative MX header");
+                        return;
+                }
+        }
 
         /* Find matching resource */
         for (l = resource_group->priv->resources; l; l = l->next) {
