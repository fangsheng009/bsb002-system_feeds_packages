--- a/data/xml/ConnectionManager.xml
+++ b/data/xml/ConnectionManager.xml
@@ -79,6 +79,20 @@ feature provided by your editor.
 			<dataType>i4</dataType>
 			<defaultValue>0</defaultValue>
 		</stateVariable>
+		<stateVariable sendEvents="no">
+			<name>A_ARG_TYPE_Password</name>
+			<dataType>string</dataType>
+			<defaultValue></defaultValue>
+		</stateVariable>
+		<stateVariable sendEvents="no">
+			<name>A_ARG_TYPE_Result</name>
+			<dataType>string</dataType>
+			<defaultValue></defaultValue>
+			<allowedValueList>
+				<allowedValue>true</allowedValue>
+				<allowedValue>false</allowedValue>
+			</allowedValueList>
+		</stateVariable>
 	</serviceStateTable>
 	<actionList>
 		<action>
@@ -151,5 +165,30 @@ feature provided by your editor.
 				</argument>
 			</argumentList>
 		</action>
+		<action>
+			<name>UserAuthentication</name>
+			<argumentList>
+				<argument>
+					<name>Password</name>
+					<direction>in</direction>
+					<relatedStateVariable>A_ARG_TYPE_Password</relatedStateVariable>
+				</argument>
+				<argument>
+					<name>Result</name>
+					<direction>out</direction>
+					<relatedStateVariable>A_ARG_TYPE_Result</relatedStateVariable>
+				</argument>
+			</argumentList>
+		</action>
+		<action>
+			<name>IsAuthenticated</name>
+			<argumentList>
+				<argument>
+					<name>Result</name>
+					<direction>out</direction>
+					<relatedStateVariable>A_ARG_TYPE_Result</relatedStateVariable>
+				</argument>
+			</argumentList>
+		</action>
 	</actionList>
 </scpd>
--- a/data/xml/MediaRenderer.xml
+++ b/data/xml/MediaRenderer.xml
@@ -7,6 +7,7 @@
 		<minor>0</minor>
 	</specVersion>
 	<device>
+		<skifta:X_UA xmlns:skifta="urn:schemas-skifta-com:device-1-0">true</skifta:X_UA>
 		<presentationURL></presentationURL>
 		<deviceType>urn:schemas-upnp-org:device:MediaRenderer:1</deviceType>
 		<friendlyName>Skifta Audio Module</friendlyName>
--- a/src/plugins/gst-renderer/rygel-gst-connection-manager.vala
+++ b/src/plugins/gst-renderer/rygel-gst-connection-manager.vala
@@ -25,7 +25,12 @@
 using GUPnP;
 
 public class Rygel.GstConnectionManager : Rygel.ConnectionManager {
+    private bool protect;
+    private string password;
+
     public override void constructed () {
+        MetaConfig config;
+
         base.constructed ();
 
         this.connection_ids       = "0";
@@ -57,6 +62,22 @@ public class Rygel.GstConnectionManager
 									"http-get:*:audio/x-ac3:*," +
  									"http-get:*:audio/mp4a-latm:*," +
                                     "http-get:*:audio/x-m4a:*";
+
+        this.action_invoked["UserAuthentication"] += this.userAuthentication_cb;
+        this.action_invoked["IsAuthenticated"] += this.isAuthenticated_cb;
+
+        config = Rygel.MetaConfig.get_default ();
+        try {
+            this.protect = config.get_bool("GstRenderer", "protect");
+        } catch (Error err) {
+            this.protect = false;
+        }
+        try {
+            this.password = config.get_string("GstRenderer", "password");
+        } catch (Error err) {
+            this.protect = false;
+        }
+        this.root_device.acl_enable(this.protect);
     }
 
     private override void get_current_connection_info_cb (ConnectionManager   cm,
@@ -99,4 +120,52 @@ public class Rygel.GstConnectionManager
 
         action.return ();
     }
+
+    private void isAuthenticated_cb (ConnectionManager   cm,
+                                       owned ServiceAction action) {
+        bool allowed = true;
+
+        if(this.protect)
+        {
+            allowed = this.root_device.acl_is_permit(action.get_remote_ip());
+        }
+
+        action.set ("Result", typeof (string), (allowed ? "true" : "false"));
+
+        action.return ();
+    }
+
+    private void userAuthentication_cb (ConnectionManager   cm,
+                                       owned ServiceAction action) {
+        string passwd;
+        bool allowed = !this.protect;
+        size_t passwd_length;
+        uchar[] decoded_passwd;
+        int idx;
+
+        if(this.protect)
+        {
+            action.get ("Password", typeof (string), out passwd);
+
+            decoded_passwd = Base64.decode(passwd, out passwd_length);
+            for(idx = 0; (idx < this.password.length) && (idx < passwd_length); idx++)
+            {
+                if((int)decoded_passwd[idx] != (int)this.password[idx])
+                {
+                    break;
+                }
+            }
+
+            allowed = ((idx == this.password.length) && (idx == passwd_length));
+
+            if(allowed)
+            {
+                this.root_device.acl_permit(action.get_remote_ip(), 24*3600);
+            }
+        }
+
+        action.set ("Result", typeof (string), (allowed ? "true" : "false"));
+        action.return ();
+    }
+
 }
--- a/vapi/gupnp-1.0.vapi
+++ b/vapi/gupnp-1.0.vapi
@@ -97,6 +97,9 @@ namespace GUPnP {
 		public RootDevice.full (GUPnP.Context context, GUPnP.ResourceFactory factory, GUPnP.XMLDoc description_doc, string description_path, string description_dir);
 		public unowned string get_description_dir ();
 		public unowned string get_description_path ();
+		public void acl_enable(bool enable);
+                public void acl_permit(string ip, uint live_time);
+                public bool acl_is_permit(string ip);		
 		[CCode (has_construct_function = false)]
 		public RootDevice (GUPnP.Context context, string description_path, string description_dir);
 		public bool available { get; set; }
@@ -124,6 +127,7 @@ namespace GUPnP {
 		public GLib.List<string> get_locales ();
 		public Soup.Message<string> get_message ();
 		public unowned string get_name ();
+                public unowned string get_remote_ip();
 		public void get_value (string argument, ref GLib.Value value);
 		public void @return ();
 		public void return_error (uint error_code, string? error_description);
